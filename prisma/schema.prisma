// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String          @unique
  firstname      String?
  lastname       String?
  createdAt      DateTime        @default(now())
  clerkid        String          @unique
  studio         Media?
  cosmos         Cosmos[]
  cosmosvideos   CosmosVideo[]
  cosmoscomment  CosmosComment[]
  members        Member[]
  cosmossender   CosmosInvite[]  @relation("cosmossender")
  cosmosreciever CosmosInvite[]  @relation("cosmosreciever")
  image          String?
  workspace      WorkSpace[]
  videos         Video[]
  subscription   Subscription?
  opalmembers    OpalMember[]
  notification   Notification[]
  sender         Invite[]        @relation("sender")
  reciever       Invite[]        @relation("reciever")
  trial          Boolean         @default(false)
  firstView      Boolean         @default(false)
  comment        Comment[]
}

model Cosmos {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cosmostype    CosmosType
  name          String
  User          User?          @relation(fields: [userId], references: [id])
  userId        String?        @db.Uuid
  createdAt     DateTime       @default(now())
  cosmosfolders CosmosFolder[]
  cosmosvideos  CosmosVideo[]
  members       Member[]
  cosmosinvite  CosmosInvite[]
}

model CosmosFolder {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @default("Untitled Folder")
  createdAt    DateTime      @default(now())
  Cosmos       Cosmos?       @relation(fields: [cosmosId], references: [id])
  cosmosId     String?       @db.Uuid
  cosmosvideos CosmosVideo[]
}

model CosmosVideo {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String?         @default("Untilted Video")
  description    String?         @default("No Description")
  source         String          @unique
  createdAt      DateTime        @default(now())
  CosmosFolder   CosmosFolder?   @relation(fields: [cosmosfolderId], references: [id], onDelete: Cascade)
  cosmosfolderId String?         @db.Uuid
  User           User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?         @db.Uuid
  processing     Boolean         @default(true)
  Cosmos         Cosmos?         @relation(fields: [cosmosId], references: [id], onDelete: Cascade)
  cosmosId       String?         @db.Uuid
  views          Int             @default(0)
  summery        String?
  CosmosComment  CosmosComment[]
}

model CosmosComment {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment       String
  reply         CosmosComment[] @relation("reply")
  CosmosComment CosmosComment?  @relation("reply", fields: [commentId], references: [id])
  commentId     String?         @db.Uuid
  User          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?         @db.Uuid
  CosmosVideo   CosmosVideo?    @relation(fields: [cosmosvideoId], references: [id], onDelete: Cascade)
  cosmosvideoId String?         @db.Uuid
  createdAt     DateTime        @default(now())
}

model Member {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.Uuid
  createdAt   DateTime @default(now())
  member      Boolean  @default(true)
  Cosmos      Cosmos?  @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?  @db.Uuid
}

model CosmosInvite {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cosmossender     User?   @relation("cosmossender", fields: [cosmossenderId], references: [id])
  cosmossenderId   String? @db.Uuid
  cosmosreciever   User?   @relation("cosmosreciever", fields: [cosmosrecieverId], references: [id])
  cosmosrecieverId String? @db.Uuid
  content          String
  Cosmos           Cosmos? @relation(fields: [cosmosId], references: [id])
  cosmosId         String? @db.Uuid
  accepted         Boolean @default(false)
}

model Comment {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment   String
  reply     Comment[] @relation("reply")
  Comment   Comment?  @relation("reply", fields: [commentId], references: [id])
  commentId String?   @db.Uuid
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?   @db.Uuid
  Video     Video?    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String?   @db.Uuid
  createdAt DateTime  @default(now())
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id])
  userId     String?           @unique @db.Uuid
  createdAt  DateTime          @default(now())
  plan       SUBSCRIPTION_PLAN @default(FREE)
  updatedAt  DateTime          @default(now())
  customerId String?           @unique
}

model Media {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  screen String?
  mic    String?
  camera String?
  preset PRESET  @default(SD)
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique @db.Uuid
}

model WorkSpace {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        Type
  name        String
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?      @db.Uuid
  createdAt   DateTime     @default(now())
  folders     Folder[]
  videos      Video[]
  opalmembers OpalMember[]
  invite      Invite[]
}

model Folder {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @default("Untitled Folder")
  createdAt   DateTime   @default(now())
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
  videos      Video[]
}

model Video {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String?    @default("Untilted Video")
  description String?    @default("No Description")
  source      String     @unique
  createdAt   DateTime   @default(now())
  Folder      Folder?    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String?    @db.Uuid
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?    @db.Uuid
  processing  Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  workSpaceId String?    @db.Uuid
  views       Int        @default(0)
  summery     String?
  Comment     Comment[]
}

model OpalMember {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.Uuid
  createdAt   DateTime   @default(now())
  opalmember  Boolean    @default(true)
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
}

model Notification {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User    User?   @relation(fields: [userId], references: [id])
  userId  String? @db.Uuid
  content String
}

model Invite {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender      User?      @relation("sender", fields: [senderId], references: [id])
  senderId    String?    @db.Uuid
  reciever    User?      @relation("reciever", fields: [recieverId], references: [id])
  recieverId  String?    @db.Uuid
  content     String
  WorkSpace   WorkSpace? @relation(fields: [workSpaceId], references: [id])
  workSpaceId String?    @db.Uuid
  accepted    Boolean    @default(false)
}

enum CosmosType {
  PERSONAL
  PUBLIC
}

enum Type {
  PERSONAL
  PUBLIC
}

enum PRESET {
  HD
  SD
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}
